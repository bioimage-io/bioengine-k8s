# Default values for imjoy-app-engine.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
replicaCount: 1
acmeEmail: "${EMAIL}"
certSecretName: hypha-tls
hyphaHostName: https://hypha.${HOSTNAME}
s3ConsoleHostName: https://hs3c.${HOSTNAME}
s3_endpoint_url_public: https://hs3.${HOSTNAME}
auth0_audience: https://imjoy.eu.auth0.com/api/v2/
auth0_domain: imjoy.eu.auth0.com
jwt_secret: "${JWT_SECRET}"

# securityContext:
#   runAsNonRoot: true
#   enabled: true
#   runAsUser: 1001 # Run as non-root user
#   runAsGroup: 1001 # Run with the same group
#   fsGroup: 1001 # File system group should also be non-root
#   fsGroupChangePolicy: "OnRootMismatch" # Set the fsGroup change policy
#   capabilities:
#     drop:
#     - ALL # Drop all capabilities
#   allowPrivilegeEscalation: false # Do not allow privilege escalation
#   seccompProfile:
#     type: RuntimeDefault

image:
  repository: ghcr.io/amun-ai/hypha
  pullPolicy: IfNotPresent
  tag: "0.15.50"

service:
  type: ClusterIP
  port: 80
  annotations: {}

ingress:
  enabled: true
  className: nginx
  path: /
  hosts:
  - hypha.${HOSTNAME}
  annotations:
    kubernetes.io/tls-acme: "true"
    cert-manager.k8s.io/acme-challenge-type: http01
    cert-manager.io/cluster-issuer: letsencrypt
    certmanager.k8s.io/acme-http01-edit-in-place: "true"
  tls:
  - secretName: tls-secret
    hosts:
    - hypha.${HOSTNAME}

redis:
  fullnameOverride: "redis"
  enabled: true
  global:
    redis:
      password: ${REDIS_PASSWORD}
minio:
  fullnameOverride: "minio"
  enabled: true
  auth:
    rootUser: "${S3_ACCESS_KEY}"
    rootPassword: "${S3_SECRET_KEY}"
  apiIngress:
    enabled: true
    annotations:
      kubernetes.io/tls-acme: "true"
      cert-manager.k8s.io/acme-challenge-type: http01
      cert-manager.io/cluster-issuer: letsencrypt
      certmanager.k8s.io/acme-http01-edit-in-place: "true"
    hostname: s3c.${HOSTNAME}
    tls: true
    extraTls:
    - hosts:
      - s3c.${HOSTNAME}
      secretName: minio-s3c
  ingress:
    enabled: true
    annotations:
      kubernetes.io/tls-acme: "true"
      cert-manager.k8s.io/acme-challenge-type: http01
      cert-manager.io/cluster-issuer: letsencrypt
      certmanager.k8s.io/acme-http01-edit-in-place: "true"
    hostname: s3.${HOSTNAME}
    tls: true
    extraTls:
    - hosts:
      - s3.${HOSTNAME}
      secretName: minio-s3
  persistence:
    size: 64Gi

tritoninferenceserver:
  enabled: true
  fullnameOverride: "tritoninferenceserver"
  replicaCount: 2
  startupProbe:
    initialDelaySeconds: 10
    periodSeconds: 60
    failureThreshold: 60
  initContainers:
  - name: bmz
    image: minio/mc
    command: ["/bin/sh"]
    args:
    - "-c"
    - |
      mc alias set ebi-s3-endpoint https://uk1s3.embassy.ebi.ac.uk
      mc alias set minio http://minio:9000 $(ROOTUSER) $(ROOTPASSWORD)
      mc mb minio/model-repository || true
      mc mirror --overwrite ebi-s3-endpoint/model-repository minio/model-repository
      mc mirror --overwrite minio/model-repository/ /model-repository
    volumeMounts:
    - mountPath: /model-repository
      name: triton-cache
      subPath: model-repository
    env:
    - name: MC_CONFIG_DIR # Specify a custom config directory for mc
      value: "/tmp/.mc"
    - name: ROOTPASSWORD
      valueFrom:
        secretKeyRef:
          name: minio
          key: root-password
    - name: ROOTUSER
      valueFrom:
        secretKeyRef:
          name: minio
          key: root-user
  volumes:
  - emptyDir:
      medium: Memory
    name: dshm
  - ephemeral:
      volumeClaimTemplate:
        spec:
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: 64Gi
          storageClassName: standard
          volumeMode: Filesystem
    name: triton-cache
  image:
    imageName: nvcr.io/nvidia/tritonserver:22.04-py3
    modelRepository: /model-repository
    modelStore: /model-repository
    modelSnapshotsPath: /model-snapshots
    env:
    - name: TRITON_MODEL_DIRECTORY
      value: "/model-repository"
    - name: TF_FORCE_GPU_ALLOW_GROWTH
      value: "true"
    - name: AWS_ACCESS_KEY_ID
      value: "${S3_ACCESS_KEY}"
    - name: AWS_SECRET_ACCESS_KEY
      value: "${S3_SECRET_KEY}"
    - name: AWS_REGION
      value: "us-east-1"
    - name: S3_ENDPOINT
      value: "${S3_ENDPOINT_URL}"
    - name: S3_USE_HTTPS
      value: "0"
  resources:
    requests:
      memory: "32Gi"
      cpu: "8"
    limits:
      memory: "32Gi"
      cpu: "16"
