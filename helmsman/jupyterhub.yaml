# DaskHub configuration values
# ----------------------------
rbac:
  enabled: true # Create and use roles and service accounts on an RBAC-enabled cluster.

jupyterhub:
  # Easier to install dask raw and put binder around it
  nameOverride: daskhub-jupyter
  # fullnameOverride: daskhub-jupyter
  proxy:
    service:
      type: ClusterIP
    chp:
      networkPolicy:
        egress:
        - to:
          - namespaceSelector:
              matchLabels:
                kubernetes.io/metadata.name: kube-system
          ports:
          - protocol: UDP
            port: 53
          - protocol: TCP
            port: 53
  ingress:
    enabled: true
    hosts:
    - "jupyter.${HOSTNAME}"
    annotations:
      kubernetes.io/ingress.class: nginx
      kubernetes.io/tls-acme: "true"
      cert-manager.k8s.io/acme-challenge-type: http01
      cert-manager.io/cluster-issuer: letsencrypt-production
      certmanager.k8s.io/acme-http01-edit-in-place: "true"
    # https:
    #   enabled: true
    #   type: nginx
    tls:
    - secretName: jupyterhub-cert
      hosts:
      - "jupyter.${HOSTNAME}"
  # JupyterHub configuration goes here.
  # See https://github.com/jupyterhub/zero-to-jupyterhub-k8s/blob/master/jupyterhub/values.yaml
  hub:
    readinessProbe:
      initialDelaySeconds: 60
    networkPolicy:
      egress:
      - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
        ports:
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 53
    config:
      GenericOAuthenticator:
        # client_id: ""
        # client_secret: ""
        client_id: "${AAI_CLIENT_ID}"
        client_secret: "${AAI_CLIENT_SECRET}"
        # client_id: ""
        oauth_callback_url: https://jupyter.${HOSTNAME}/hub/oauth_callback
        authorize_url: https://login.elixir-czech.org/oidc/authorize
        token_url: https://login.elixir-czech.org/oidc/token
        userdata_url: https://login.elixir-czech.org/oidc/userinfo
        scope:
        - openid
        - email
        username_key: email
        allow_all: true
        allow_existing_users: true
      JupyterHub:
        admin_access: true
        authenticator_class: generic-oauth
    baseUrl: /

    services:
      dask-gateway:
        display: false
        # extraConfig:
        # Register Dask Gateway service and setup singleuser environment.
  singleuser:
    startTimeout: 600
    cloudMetadata:
      blockWithIptables: false
    networkPolicy:
      egress:
      - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
        ports:
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 53
    image:
      name: pangeo/base-notebook # Image to use for singleuser environment. Must include dask-gateway.
      # tag: "2023.02.27"
    defaultUrl: "/lab" # Use jupyterlab by defualt.
    # extraEnv:
    # GRANT_SUDO: "yes"
    # JUPYTERHUB_SINGLEUSER_APP: "jupyterhub.singleuserapp.SingleUserNotebookApp"
    # NOTEBOOK_ARGS: "--allow-root"
    cpu:
      limit: 4
      guarantee: 2
    memory:
      limit: 8G
      guarantee: 6G
    profileList:
    - display_name: "Medium Memory"
      description: "Environment with 4 CPUs and 16Gi RAM"
      kubespawner_override:
        cpu_limit: 4
        mem_limit: "16G"
        node_selector: {"cloud.google.com/gke-spot": "true"}
    - display_name: "High Memory"
      description: "Environment with 8 CPUs and 32Gi RAM"
      kubespawner_override:
        cpu_limit: 8
        mem_limit: "32G"
        node_selector: {"cloud.google.com/gke-spot": "true"}
    - display_name: "1 GPU High Memory"
      description: "Environment with 4 CPUs, 16Gi RAM, and 1 GPU"
      kubespawner_override:
        image: pangeo/ml-notebook
        cpu_limit: 4
        mem_limit: "16G"
        node_selector: {"cloud.google.com/gke-accelerator": "nvidia-tesla-t4", "cloud.google.com/gke-accelerator-count": "1", "cloud.google.com/gke-spot": "true"}
        extra_resource_limits:
          nvidia.com/gpu: "1"
    - display_name: "1 GPU High Memory"
      description: "ZeroCostDemo"
      kubespawner_override:
        image: jupyter/base-notebook
        cpu_limit: 4
        mem_limit: "16G"
        node_selector: {"cloud.google.com/gke-accelerator": "nvidia-tesla-t4", "cloud.google.com/gke-accelerator-count": "1", "cloud.google.com/gke-spot": "true"}
        extra_resource_limits:
          nvidia.com/gpu: "1"
dask-gateway:
  enabled: true # Enabling dask-gateway will install Dask Gateway as a dependency.
  # Futher Dask Gateway configuration goes here
  # See https://github.com/dask/dask-gateway/blob/master/resources/helm/dask-gateway/values.yaml
  gateway:
    auth:
      type: jupyterhub # Use JupyterHub to authenticate with Dask Gateway
      # jupyterhub:
      # apiUrl: "http://dask-hub:8081/hub/api"  # JupyterHub API URL
    #     apiToken:
    # apiTokenFromSecretName: dask-hub
    # apiTokenFromSecretKey: dask-hub.services.dask-gateway.apiToken
    # prefix: "/services/dask-gateway"  # Users connect to the Gateway through the JupyterHub service.
  traefik:
    service:
      type: ClusterIP # Access Dask Gateway through JupyterHub. To access the Gateway from outside JupyterHub, this must be changed to a `LoadBalancer`.


dask-kubernetes:
  # Use dask-kubernetes, rather than Dask Gateway, for creating Dask Clusters.
  # Enabling this also requires
  # 1. Setting `jupyterhub.singleuser.serviceAccountName: daskkubernetes`.
  # 2. Ensuring that `dask-kubernetes` is in your singleuser environment.
  enabled: false
